const TokenTypes = { ADD: 'ADD', SUB: 'SUB', GET: 'GET', GETV: 'GETV', LBRAK: 'LBRAK', RBRAK: 'RBRAK' }; class Token /* ---> TOKEN <--- */{ /* ---> CONSTRUCTOR <--- */ constructor(type, text) {this.type = type; this.text = text;} }; class lexer /* ---> LEXER <--- */{ /* ---> CONSTRUCTOR (Lexer) <--- */ constructor(text) { this.text = text; this.pos = -1; this.cur_char = ''; this.toNext(); } /* ---> TONEXT FUNCTION <--- */ toNext() { this.pos++; if(this.pos < this.text.length) this.cur_char = this.text[this.pos]; else this.cur_char = null; } /* ---> START FUNCTION <--- */ start() { let tokens = []; while(this.cur_char != null) { /* ---> HANDLE WHITESPACE <--- */ if(this.cur_char.match(/ |\n|\t/) != null) { this.toNext(); } /* ---> ADD TOKEN <--- */ else if(this.cur_char == "+") { tokens.push(new Token(TokenTypes.ADD, this.cur_char)); this.toNext(); } /* ---> SUB TOKEN <--- */ else if(this.cur_char == "-") { tokens.push(new Token(TokenTypes.SUB, this.cur_char)); this.toNext(); } /* COMMENT */ else { this.toNext(); } } return tokens; } }; class parser /* ---> PARSER <--- */{ /* ---> CONSTRUCTOR (Parser) <--- */ constructor(tokens) { this.tokens = tokens; this.cur_tok = null; this.index = 0; this.cells = new Array(30000).fill(0); this.pointer = 0; this.toNext(); } /* ---> TONEXT FUNCTION <--- */ toNext() { this.index++; if(this.index < this.tokens.length) this.cur_tok = this.tokens[this.index]; else this.cur_tok = null; } /* ---> START FUNCTION <--- */ start() { while(this.cur_tok != null) { /* ADD FUNCTIONALITY */ if(this.cur_tok.type == TokenTypes.ADD) { this.cells[this.pointer] += 1; this.toNext(); } /* ---> SUB FUNCTIONALITY <--- */ else if(this.cur_tok.type == TokenTypes.SUB) { this.cells[this.pointer] -= 1; this.toNext(); } } return this.cells[this.pointer]; } }; /* ---> START <--- */ function start(code) { let lex = new lexer(code); let toks = lex.start(); let par = new parser(toks); console.log(par.start()) }; start(process.argv[2]); 